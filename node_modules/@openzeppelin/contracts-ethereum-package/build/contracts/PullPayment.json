{
  "contractName": "PullPayment",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPaymentsWithGas",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPaymentsWithGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. * Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. * To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.\",\"methods\":{\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * NOTE: This function has been deprecated, use {withdrawPaymentsWithGas} instead. Calling contracts with fixed gas limits is an anti-pattern and may break contract interactions in network upgrades (hardforks). https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more.]\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}},\"withdrawPaymentsWithGas(address)\":{\"details\":\"Same as {withdrawPayments}, but forwarding all gas to the recipient.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.     * _Available since v2.4.0._\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/frangio/oz/eth-pkg-contracts/contracts/payment/PullPayment.sol\":\"PullPayment\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/frangio/oz/eth-pkg-contracts/contracts/GSN/Context.sol\":{\"keccak256\":\"0x3491510fa4862af1a43f6c860d9cf7392240196540cd3c0eea79d374d419c5a1\",\"urls\":[\"bzzr://5cddbf3b74b775a8670757a6b8e108dac17dac20253f35f4c729e9cb6bea4ed3\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\",\"urls\":[\"bzzr://292843005e754e752644f767477ec5ad7a1ffc91ddb18c38b8079c62f3993cad\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/ownership/Secondary.sol\":{\"keccak256\":\"0x188ce79c2838f688befe0991f0bc5a3868242e7e3f6f346d76fb338995e4eacf\",\"urls\":[\"bzzr://99398942cc33b341c2274fa713fe58174895c8a579e78cc9c82a59fcb48ef9f4\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/payment/PullPayment.sol\":{\"keccak256\":\"0x0caf5a4fde059029653da969501e498b88a4392701205cfcf6137450ab0bb7cd\",\"urls\":[\"bzzr://ca25fe7896c0c4995cbe87af0a3be9744ee7f5d1f643aef1d88144c7c02cce8c\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/payment/escrow/Escrow.sol\":{\"keccak256\":\"0xeb802757bf80cca88fff9126f480ca4c8538208aae0d3d83ff21d79f0998e3cb\",\"urls\":[\"bzzr://7cc1de9d5e22476883029ccc006de5a379cfcf223dbdb35245da33af0adf87aa\"]},\"/home/frangio/oz/eth-pkg-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x70df50e240407aa50915ad14f61b1a901fa335b37de20955b99ed647be756af0\",\"urls\":[\"bzzr://cd04ca8d050befdf06ac93c2f6f5ea7250d2199b44aecbe54ded512e823f711a\"]},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"keccak256\":\"0xf79d9851c085aa8412e87d7a26d3485488fe12538ecb4e317ce41fc1f2c3a16a\",\"urls\":[\"bzzr://e45c5a995f57637b2300a376647ee345cc9cb30ee1984735091fcd4b10ff3500\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611686806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806331b3eb9414610051578063653cfa59146100955780638129fc1c146100d9578063e2982c21146100e3575b600080fd5b6100936004803603602081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061013b565b005b6100d7600480360360208110156100ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101f7565b005b6100e16102b3565b005b610125600480360360208110156100f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061052c565b6040518082815260200191505060405180910390f35b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156101dc57600080fd5b505af11580156101f0573d6000803e3d6000fd5b5050505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636809691a826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561029857600080fd5b505af11580156102ac573d6000803e3d6000fd5b5050505050565b600060019054906101000a900460ff16806102d257506102d161060f565b5b806102e957506000809054906101000a900460ff16155b61033e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061162d602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561038e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610508576040516103f190610620565b604051809103906000f08015801561040d573d6000803e3d6000fd5b50603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4d66de8306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156104ef57600080fd5b505af1158015610503573d6000803e3d6000fd5b505050505b80156105295760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e3a9db1a836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105cd57600080fd5b505afa1580156105e1573d6000803e3d6000fd5b505050506040513d60208110156105f757600080fd5b81019080805190602001909291905050509050919050565b600080303b90506000811491505090565b610fff8061062e8339019056fe6080604052610fec806100136000396000f3fe6080604052600436106100705760003560e01c8063c4d66de81161004e578063c4d66de814610168578063c6dbdf61146101b9578063e3a9db1a14610210578063f340fa011461027557610070565b80632348238c1461007557806351cff8d9146100c65780636809691a14610117575b600080fd5b34801561008157600080fd5b506100c46004803603602081101561009857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102b9565b005b3480156100d257600080fd5b50610115600480360360208110156100e957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b5565b005b34801561012357600080fd5b506101666004803603602081101561013a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610684565b005b34801561017457600080fd5b506101b76004803603602081101561018b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610835565b005b3480156101c557600080fd5b506101ce61093e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021c57600080fd5b5061025f6004803603602081101561023357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610968565b6040518082815260200191505060405180910390f35b6102b76004803603602081101561028b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109b1565b005b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166102fa610b4a565b73ffffffffffffffffffffffffffffffffffffffff1614610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610f95602c913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180610f6b602a913960400191505060405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104f6610b4a565b73ffffffffffffffffffffffffffffffffffffffff1614610562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610f95602c913960400191505060405180910390fd5b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610631573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040518082815260200191505060405180910390a25050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106c5610b4a565b73ffffffffffffffffffffffffffffffffffffffff1614610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610f95602c913960400191505060405180910390fd5b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107e3818373ffffffffffffffffffffffffffffffffffffffff16610b5290919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040518082815260200191505060405180910390a25050565b600060019054906101000a900460ff16806108545750610853610ca3565b5b8061086b57506000809054906101000a900460ff16155b6108c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f3d602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610910576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61091982610cb4565b801561093a5760008060016101000a81548160ff0219169083151502179055505b5050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109f2610b4a565b73ffffffffffffffffffffffffffffffffffffffff1614610a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610f95602c913960400191505060405180910390fd5b6000349050610ab581606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e7a90919063ffffffff16565b606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4826040518082815260200191505060405180910390a25050565b600033905090565b803073ffffffffffffffffffffffffffffffffffffffff16311015610bdf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a20696e73756666696369656e742062616c616e636500000081525060200191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d8060008114610c3f576040519150601f19603f3d011682016040523d82523d6000602084013e610c44565b606091505b5050905080610c9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180610f03603a913960400191505060405180910390fd5b505050565b600080303b90506000811491505090565b600060019054906101000a900460ff1680610cd35750610cd2610ca3565b5b80610cea57506000809054906101000a900460ff16155b610d3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f3d602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610d8f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a18015610e765760008060016101000a81548160ff0219169083151502179055505b5050565b600080828401905083811015610ef8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645365636f6e646172793a206e6577207072696d61727920697320746865207a65726f20616464726573735365636f6e646172793a2063616c6c6572206973206e6f7420746865207072696d617279206163636f756e74a165627a7a723058202acb46b5d522c20b280d4b7220b6c18de445a32c0e5afe7857ed9868c5fcf27a0029436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a72305820c7cf4e1e5c8e25eb9d27a1f16ecd99d77bae9966822023df8703ce45eca7681e0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806331b3eb9414610051578063653cfa59146100955780638129fc1c146100d9578063e2982c21146100e3575b600080fd5b6100936004803603602081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061013b565b005b6100d7600480360360208110156100ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101f7565b005b6100e16102b3565b005b610125600480360360208110156100f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061052c565b6040518082815260200191505060405180910390f35b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156101dc57600080fd5b505af11580156101f0573d6000803e3d6000fd5b5050505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636809691a826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561029857600080fd5b505af11580156102ac573d6000803e3d6000fd5b5050505050565b600060019054906101000a900460ff16806102d257506102d161060f565b5b806102e957506000809054906101000a900460ff16155b61033e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061162d602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561038e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610508576040516103f190610620565b604051809103906000f08015801561040d573d6000803e3d6000fd5b50603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4d66de8306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156104ef57600080fd5b505af1158015610503573d6000803e3d6000fd5b505050505b80156105295760008060016101000a81548160ff0219169083151502179055505b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e3a9db1a836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105cd57600080fd5b505afa1580156105e1573d6000803e3d6000fd5b505050506040513d60208110156105f757600080fd5b81019080805190602001909291905050509050919050565b600080303b90506000811491505090565b610fff8061062e8339019056fe6080604052610fec806100136000396000f3fe6080604052600436106100705760003560e01c8063c4d66de81161004e578063c4d66de814610168578063c6dbdf61146101b9578063e3a9db1a14610210578063f340fa011461027557610070565b80632348238c1461007557806351cff8d9146100c65780636809691a14610117575b600080fd5b34801561008157600080fd5b506100c46004803603602081101561009857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102b9565b005b3480156100d257600080fd5b50610115600480360360208110156100e957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b5565b005b34801561012357600080fd5b506101666004803603602081101561013a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610684565b005b34801561017457600080fd5b506101b76004803603602081101561018b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610835565b005b3480156101c557600080fd5b506101ce61093e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021c57600080fd5b5061025f6004803603602081101561023357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610968565b6040518082815260200191505060405180910390f35b6102b76004803603602081101561028b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109b1565b005b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166102fa610b4a565b73ffffffffffffffffffffffffffffffffffffffff1614610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610f95602c913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180610f6b602a913960400191505060405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104f6610b4a565b73ffffffffffffffffffffffffffffffffffffffff1614610562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610f95602c913960400191505060405180910390fd5b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610631573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040518082815260200191505060405180910390a25050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106c5610b4a565b73ffffffffffffffffffffffffffffffffffffffff1614610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610f95602c913960400191505060405180910390fd5b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107e3818373ffffffffffffffffffffffffffffffffffffffff16610b5290919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040518082815260200191505060405180910390a25050565b600060019054906101000a900460ff16806108545750610853610ca3565b5b8061086b57506000809054906101000a900460ff16155b6108c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f3d602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610910576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61091982610cb4565b801561093a5760008060016101000a81548160ff0219169083151502179055505b5050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109f2610b4a565b73ffffffffffffffffffffffffffffffffffffffff1614610a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180610f95602c913960400191505060405180910390fd5b6000349050610ab581606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e7a90919063ffffffff16565b606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4826040518082815260200191505060405180910390a25050565b600033905090565b803073ffffffffffffffffffffffffffffffffffffffff16311015610bdf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a20696e73756666696369656e742062616c616e636500000081525060200191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d8060008114610c3f576040519150601f19603f3d011682016040523d82523d6000602084013e610c44565b606091505b5050905080610c9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180610f03603a913960400191505060405180910390fd5b505050565b600080303b90506000811491505090565b600060019054906101000a900460ff1680610cd35750610cd2610ca3565b5b80610cea57506000809054906101000a900460ff16155b610d3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610f3d602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015610d8f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a18015610e765760008060016101000a81548160ff0219169083151502179055505b5050565b600080828401905083811015610ef8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645365636f6e646172793a206e6577207072696d61727920697320746865207a65726f20616464726573735365636f6e646172793a2063616c6c6572206973206e6f7420746865207072696d617279206163636f756e74a165627a7a723058202acb46b5d522c20b280d4b7220b6c18de445a32c0e5afe7857ed9868c5fcf27a0029436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a72305820c7cf4e1e5c8e25eb9d27a1f16ecd99d77bae9966822023df8703ce45eca7681e0029",
  "sourceMap": "849:2390:123:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;849:2390:123;;;;;;;",
  "deployedSourceMap": "849:2390:123:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;849:2390:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1919:96;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1919:96:123;;;;;;;;;;;;;;;;;;;:::i;:::-;;2387:112;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2387:112:123;;;;;;;;;;;;;;;;;;;:::i;:::-;;922:278;;;:::i;:::-;;2617:110;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2617:110:123;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1919:96;1985:7;;;;;;;;;;;:16;;;2002:5;1985:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1985:23:123;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1985:23:123;;;;1919:96;:::o;2387:112::-;2462:7;;;;;;;;;;;:23;;;2486:5;2462:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2462:30:123;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2462:30:123;;;;2387:112;:::o;922:278::-;1024:12:159;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:19;1152:12;;;;;;;;;;;1151:13;1129:35;;1174:14;1170:80;;;1213:4;1198:12;;:19;;;;;;;;;;;;;;;;;;1239:4;1225:11;;:18;;;;;;;;;;;;;;;;;;1170:80;1096:1:123;1068:30;;1076:7;;;;;;;;;;;1068:30;;;1064:130;;;1124:12;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1124:12:123;1114:7;;:22;;;;;;;;;;;;;;;;;;1150:7;;;;;;;;;;;:18;;;1177:4;1150:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1150:33:123;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1150:33:123;;;;1064:130;1268:14:159;1264:55;;;1307:5;1292:12;;:20;;;;;;;;;;;;;;;;;;1264:55;922:278:123;:::o;2617:110::-;2670:7;2696;;;;;;;;;;;:18;;;2715:4;2696:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2696:24:123;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2696:24:123;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2696:24:123;;;;;;;;;;;;;;;;2689:31;;2617:110;;;:::o;1409:467:159:-;1456:4;1797:10;1842:7;1830:20;1824:26;;1870:1;1864:2;:7;1857:14;;;1409:467;:::o;849:2390:123:-;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"@openzeppelin/upgrades/contracts/Initializable.sol\";\n\nimport \"./escrow/Escrow.sol\";\n\n/**\n * @dev Simple implementation of a\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n * strategy, where the paying contract doesn't interact directly with the\n * receiver account, which must withdraw its payments itself.\n *\n * Pull-payments are often considered the best practice when it comes to sending\n * Ether, security-wise. It prevents recipients from blocking execution, and\n * eliminates reentrancy concerns.\n *\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n * instead of Solidity's `transfer` function. Payees can query their due\n * payments with {payments}, and retrieve them with {withdrawPayments}.\n */\ncontract PullPayment is Initializable {\n    Escrow private _escrow;\n\n    function initialize() public initializer {\n        // conditional added to make initializer idempotent in case of diamond inheritance\n        if (address(_escrow) == address(0)) {\n            _escrow = new Escrow();\n            _escrow.initialize(address(this));\n        }\n    }\n\n    /**\n     * @dev Withdraw accumulated payments.\n     *\n     * Note that _any_ account can call this function, not just the `payee`.\n     * This means that contracts unaware of the `PullPayment` protocol can still\n     * receive funds this way, by having a separate account call\n     * {withdrawPayments}.\n     *\n     * NOTE: This function has been deprecated, use {withdrawPaymentsWithGas}\n     * instead. Calling contracts with fixed gas limits is an anti-pattern and\n     * may break contract interactions in network upgrades (hardforks).\n     * https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more.]\n     *\n     * @param payee Whose payments will be withdrawn.\n     */\n    function withdrawPayments(address payable payee) public {\n        _escrow.withdraw(payee);\n    }\n\n    /**\n     * @dev Same as {withdrawPayments}, but forwarding all gas to the recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * _Available since v2.4.0._\n     */\n    function withdrawPaymentsWithGas(address payable payee) external {\n        _escrow.withdrawWithGas(payee);\n    }\n\n    /**\n     * @dev Returns the payments owed to an address.\n     * @param dest The creditor's address.\n     */\n    function payments(address dest) public view returns (uint256) {\n        return _escrow.depositsOf(dest);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\n     * there is no danger of them being spent before withdrawal.\n     *\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     */\n    function _asyncTransfer(address dest, uint256 amount) internal {\n        _escrow.deposit.value(amount)(dest);\n    }\n\n    uint256[50] private ______gap;\n}\n",
  "sourcePath": "/home/frangio/oz/eth-pkg-contracts/contracts/payment/PullPayment.sol",
  "ast": {
    "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/payment/PullPayment.sol",
    "exportedSymbols": {
      "PullPayment": [
        10179
      ]
    },
    "id": 10180,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10084,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:123"
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 10085,
        "nodeType": "ImportDirective",
        "scope": 10180,
        "sourceUnit": 15207,
        "src": "25:60:123",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/payment/escrow/Escrow.sol",
        "file": "./escrow/Escrow.sol",
        "id": 10086,
        "nodeType": "ImportDirective",
        "scope": 10180,
        "sourceUnit": 10385,
        "src": "87:29:123",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10087,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 15206,
              "src": "873:13:123",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$15206",
                "typeString": "contract Initializable"
              }
            },
            "id": 10088,
            "nodeType": "InheritanceSpecifier",
            "src": "873:13:123"
          }
        ],
        "contractDependencies": [
          10384,
          15206
        ],
        "contractKind": "contract",
        "documentation": "@dev Simple implementation of a\nhttps://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\nstrategy, where the paying contract doesn't interact directly with the\nreceiver account, which must withdraw its payments itself.\n * Pull-payments are often considered the best practice when it comes to sending\nEther, security-wise. It prevents recipients from blocking execution, and\neliminates reentrancy concerns.\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\ninstead of Solidity's `transfer` function. Payees can query their due\npayments with {payments}, and retrieve them with {withdrawPayments}.",
        "fullyImplemented": true,
        "id": 10179,
        "linearizedBaseContracts": [
          10179,
          15206
        ],
        "name": "PullPayment",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 10090,
            "name": "_escrow",
            "nodeType": "VariableDeclaration",
            "scope": 10179,
            "src": "893:22:123",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$10384",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "contractScope": null,
              "id": 10089,
              "name": "Escrow",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10384,
              "src": "893:6:123",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$10384",
                "typeString": "contract Escrow"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 10118,
              "nodeType": "Block",
              "src": "963:237:123",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 10101,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 10096,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10090,
                          "src": "1076:7:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$10384",
                            "typeString": "contract Escrow"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_Escrow_$10384",
                            "typeString": "contract Escrow"
                          }
                        ],
                        "id": 10095,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1068:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": "address"
                      },
                      "id": 10097,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1068:16:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 10099,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1096:1:123",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 10098,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1088:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": "address"
                      },
                      "id": 10100,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1088:10:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1068:30:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 10117,
                  "nodeType": "IfStatement",
                  "src": "1064:130:123",
                  "trueBody": {
                    "id": 10116,
                    "nodeType": "Block",
                    "src": "1100:94:123",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 10106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 10102,
                            "name": "_escrow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10090,
                            "src": "1114:7:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Escrow_$10384",
                              "typeString": "contract Escrow"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 10104,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1124:10:123",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$10384_$",
                                "typeString": "function () returns (contract Escrow)"
                              },
                              "typeName": {
                                "contractScope": null,
                                "id": 10103,
                                "name": "Escrow",
                                "nodeType": "UserDefinedTypeName",
                                "referencedDeclaration": 10384,
                                "src": "1128:6:123",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Escrow_$10384",
                                  "typeString": "contract Escrow"
                                }
                              }
                            },
                            "id": 10105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1124:12:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Escrow_$10384",
                              "typeString": "contract Escrow"
                            }
                          },
                          "src": "1114:22:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$10384",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 10107,
                        "nodeType": "ExpressionStatement",
                        "src": "1114:22:123"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 10112,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 15511,
                                  "src": "1177:4:123",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_PullPayment_$10179",
                                    "typeString": "contract PullPayment"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_PullPayment_$10179",
                                    "typeString": "contract PullPayment"
                                  }
                                ],
                                "id": 10111,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1169:7:123",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 10113,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1169:13:123",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 10108,
                              "name": "_escrow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10090,
                              "src": "1150:7:123",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Escrow_$10384",
                                "typeString": "contract Escrow"
                              }
                            },
                            "id": 10110,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "initialize",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 10276,
                            "src": "1150:18:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address) external"
                            }
                          },
                          "id": 10114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1150:33:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 10115,
                        "nodeType": "ExpressionStatement",
                        "src": "1150:33:123"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 10119,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 10093,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 10092,
                  "name": "initializer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 15187,
                  "src": "951:11:123",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "951:11:123"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10091,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "941:2:123"
            },
            "returnParameters": {
              "id": 10094,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "963:0:123"
            },
            "scope": 10179,
            "src": "922:278:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10130,
              "nodeType": "Block",
              "src": "1975:40:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10127,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10121,
                        "src": "2002:5:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 10124,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10090,
                        "src": "1985:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$10384",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 10126,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10348,
                      "src": "1985:16:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 10128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1985:23:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10129,
                  "nodeType": "ExpressionStatement",
                  "src": "1985:23:123"
                }
              ]
            },
            "documentation": "@dev Withdraw accumulated payments.\n     * Note that _any_ account can call this function, not just the `payee`.\nThis means that contracts unaware of the `PullPayment` protocol can still\nreceive funds this way, by having a separate account call\n{withdrawPayments}.\n     * NOTE: This function has been deprecated, use {withdrawPaymentsWithGas}\ninstead. Calling contracts with fixed gas limits is an anti-pattern and\nmay break contract interactions in network upgrades (hardforks).\nhttps://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more.]\n     * @param payee Whose payments will be withdrawn.",
            "id": 10131,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10122,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10121,
                  "name": "payee",
                  "nodeType": "VariableDeclaration",
                  "scope": 10131,
                  "src": "1945:21:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 10120,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1945:15:123",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1944:23:123"
            },
            "returnParameters": {
              "id": 10123,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1975:0:123"
            },
            "scope": 10179,
            "src": "1919:96:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10142,
              "nodeType": "Block",
              "src": "2452:47:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10139,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10133,
                        "src": "2486:5:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 10136,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10090,
                        "src": "2462:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$10384",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 10138,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdrawWithGas",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10379,
                      "src": "2462:23:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 10140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2462:30:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10141,
                  "nodeType": "ExpressionStatement",
                  "src": "2462:30:123"
                }
              ]
            },
            "documentation": "@dev Same as {withdrawPayments}, but forwarding all gas to the recipient.\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\nMake sure you trust the recipient, or are either following the\nchecks-effects-interactions pattern or using {ReentrancyGuard}.\n     * _Available since v2.4.0._",
            "id": 10143,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPaymentsWithGas",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10134,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10133,
                  "name": "payee",
                  "nodeType": "VariableDeclaration",
                  "scope": 10143,
                  "src": "2420:21:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 10132,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2420:15:123",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2419:23:123"
            },
            "returnParameters": {
              "id": 10135,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2452:0:123"
            },
            "scope": 10179,
            "src": "2387:112:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 10155,
              "nodeType": "Block",
              "src": "2679:48:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10152,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10145,
                        "src": "2715:4:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 10150,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10090,
                        "src": "2696:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$10384",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 10151,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10288,
                      "src": "2696:18:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 10153,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2696:24:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 10149,
                  "id": 10154,
                  "nodeType": "Return",
                  "src": "2689:31:123"
                }
              ]
            },
            "documentation": "@dev Returns the payments owed to an address.\n@param dest The creditor's address.",
            "id": 10156,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10146,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10145,
                  "name": "dest",
                  "nodeType": "VariableDeclaration",
                  "scope": 10156,
                  "src": "2635:12:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10144,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2635:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2634:14:123"
            },
            "returnParameters": {
              "id": 10149,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10148,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10156,
                  "src": "2670:7:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10147,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2670:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2669:9:123"
            },
            "scope": 10179,
            "src": "2617:110:123",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10173,
              "nodeType": "Block",
              "src": "3149:52:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10170,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10158,
                        "src": "3189:4:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 10168,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10160,
                          "src": "3181:6:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 10163,
                            "name": "_escrow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10090,
                            "src": "3159:7:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Escrow_$10384",
                              "typeString": "contract Escrow"
                            }
                          },
                          "id": 10166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "deposit",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 10317,
                          "src": "3159:15:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                            "typeString": "function (address) payable external"
                          }
                        },
                        "id": 10167,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "3159:21:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_setvalue_nonpayable$_t_uint256_$returns$_t_function_external_payable$_t_address_$returns$__$value_$",
                          "typeString": "function (uint256) returns (function (address) payable external)"
                        }
                      },
                      "id": 10169,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3159:29:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 10171,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3159:35:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10172,
                  "nodeType": "ExpressionStatement",
                  "src": "3159:35:123"
                }
              ]
            },
            "documentation": "@dev Called by the payer to store the sent amount as credit to be pulled.\nFunds sent in this way are stored in an intermediate {Escrow} contract, so\nthere is no danger of them being spent before withdrawal.\n     * @param dest The destination address of the funds.\n@param amount The amount to transfer.",
            "id": 10174,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10161,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10158,
                  "name": "dest",
                  "nodeType": "VariableDeclaration",
                  "scope": 10174,
                  "src": "3110:12:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10157,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3110:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10160,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10174,
                  "src": "3124:14:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10159,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3124:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3109:30:123"
            },
            "returnParameters": {
              "id": 10162,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3149:0:123"
            },
            "scope": 10179,
            "src": "3086:115:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 10178,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 10179,
            "src": "3207:29:123",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 10175,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "3207:7:123",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 10177,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 10176,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "3215:2:123",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "3207:11:123",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 10180,
        "src": "849:2390:123"
      }
    ],
    "src": "0:3240:123"
  },
  "legacyAST": {
    "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/payment/PullPayment.sol",
    "exportedSymbols": {
      "PullPayment": [
        10179
      ]
    },
    "id": 10180,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10084,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:123"
      },
      {
        "absolutePath": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "file": "@openzeppelin/upgrades/contracts/Initializable.sol",
        "id": 10085,
        "nodeType": "ImportDirective",
        "scope": 10180,
        "sourceUnit": 15207,
        "src": "25:60:123",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/oz/eth-pkg-contracts/contracts/payment/escrow/Escrow.sol",
        "file": "./escrow/Escrow.sol",
        "id": 10086,
        "nodeType": "ImportDirective",
        "scope": 10180,
        "sourceUnit": 10385,
        "src": "87:29:123",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10087,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 15206,
              "src": "873:13:123",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$15206",
                "typeString": "contract Initializable"
              }
            },
            "id": 10088,
            "nodeType": "InheritanceSpecifier",
            "src": "873:13:123"
          }
        ],
        "contractDependencies": [
          10384,
          15206
        ],
        "contractKind": "contract",
        "documentation": "@dev Simple implementation of a\nhttps://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\nstrategy, where the paying contract doesn't interact directly with the\nreceiver account, which must withdraw its payments itself.\n * Pull-payments are often considered the best practice when it comes to sending\nEther, security-wise. It prevents recipients from blocking execution, and\neliminates reentrancy concerns.\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\ninstead of Solidity's `transfer` function. Payees can query their due\npayments with {payments}, and retrieve them with {withdrawPayments}.",
        "fullyImplemented": true,
        "id": 10179,
        "linearizedBaseContracts": [
          10179,
          15206
        ],
        "name": "PullPayment",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 10090,
            "name": "_escrow",
            "nodeType": "VariableDeclaration",
            "scope": 10179,
            "src": "893:22:123",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$10384",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "contractScope": null,
              "id": 10089,
              "name": "Escrow",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10384,
              "src": "893:6:123",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$10384",
                "typeString": "contract Escrow"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 10118,
              "nodeType": "Block",
              "src": "963:237:123",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 10101,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 10096,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10090,
                          "src": "1076:7:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$10384",
                            "typeString": "contract Escrow"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_Escrow_$10384",
                            "typeString": "contract Escrow"
                          }
                        ],
                        "id": 10095,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1068:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": "address"
                      },
                      "id": 10097,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1068:16:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 10099,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1096:1:123",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 10098,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1088:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": "address"
                      },
                      "id": 10100,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1088:10:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1068:30:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 10117,
                  "nodeType": "IfStatement",
                  "src": "1064:130:123",
                  "trueBody": {
                    "id": 10116,
                    "nodeType": "Block",
                    "src": "1100:94:123",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 10106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 10102,
                            "name": "_escrow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10090,
                            "src": "1114:7:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Escrow_$10384",
                              "typeString": "contract Escrow"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 10104,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1124:10:123",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$10384_$",
                                "typeString": "function () returns (contract Escrow)"
                              },
                              "typeName": {
                                "contractScope": null,
                                "id": 10103,
                                "name": "Escrow",
                                "nodeType": "UserDefinedTypeName",
                                "referencedDeclaration": 10384,
                                "src": "1128:6:123",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Escrow_$10384",
                                  "typeString": "contract Escrow"
                                }
                              }
                            },
                            "id": 10105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1124:12:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Escrow_$10384",
                              "typeString": "contract Escrow"
                            }
                          },
                          "src": "1114:22:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$10384",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 10107,
                        "nodeType": "ExpressionStatement",
                        "src": "1114:22:123"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 10112,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 15511,
                                  "src": "1177:4:123",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_PullPayment_$10179",
                                    "typeString": "contract PullPayment"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_PullPayment_$10179",
                                    "typeString": "contract PullPayment"
                                  }
                                ],
                                "id": 10111,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1169:7:123",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 10113,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1169:13:123",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 10108,
                              "name": "_escrow",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10090,
                              "src": "1150:7:123",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Escrow_$10384",
                                "typeString": "contract Escrow"
                              }
                            },
                            "id": 10110,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "initialize",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 10276,
                            "src": "1150:18:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address) external"
                            }
                          },
                          "id": 10114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1150:33:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 10115,
                        "nodeType": "ExpressionStatement",
                        "src": "1150:33:123"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 10119,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 10093,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 10092,
                  "name": "initializer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 15187,
                  "src": "951:11:123",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "951:11:123"
              }
            ],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10091,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "941:2:123"
            },
            "returnParameters": {
              "id": 10094,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "963:0:123"
            },
            "scope": 10179,
            "src": "922:278:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10130,
              "nodeType": "Block",
              "src": "1975:40:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10127,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10121,
                        "src": "2002:5:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 10124,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10090,
                        "src": "1985:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$10384",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 10126,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10348,
                      "src": "1985:16:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 10128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1985:23:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10129,
                  "nodeType": "ExpressionStatement",
                  "src": "1985:23:123"
                }
              ]
            },
            "documentation": "@dev Withdraw accumulated payments.\n     * Note that _any_ account can call this function, not just the `payee`.\nThis means that contracts unaware of the `PullPayment` protocol can still\nreceive funds this way, by having a separate account call\n{withdrawPayments}.\n     * NOTE: This function has been deprecated, use {withdrawPaymentsWithGas}\ninstead. Calling contracts with fixed gas limits is an anti-pattern and\nmay break contract interactions in network upgrades (hardforks).\nhttps://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more.]\n     * @param payee Whose payments will be withdrawn.",
            "id": 10131,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10122,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10121,
                  "name": "payee",
                  "nodeType": "VariableDeclaration",
                  "scope": 10131,
                  "src": "1945:21:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 10120,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1945:15:123",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1944:23:123"
            },
            "returnParameters": {
              "id": 10123,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1975:0:123"
            },
            "scope": 10179,
            "src": "1919:96:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10142,
              "nodeType": "Block",
              "src": "2452:47:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10139,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10133,
                        "src": "2486:5:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 10136,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10090,
                        "src": "2462:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$10384",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 10138,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdrawWithGas",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10379,
                      "src": "2462:23:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 10140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2462:30:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10141,
                  "nodeType": "ExpressionStatement",
                  "src": "2462:30:123"
                }
              ]
            },
            "documentation": "@dev Same as {withdrawPayments}, but forwarding all gas to the recipient.\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\nMake sure you trust the recipient, or are either following the\nchecks-effects-interactions pattern or using {ReentrancyGuard}.\n     * _Available since v2.4.0._",
            "id": 10143,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPaymentsWithGas",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10134,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10133,
                  "name": "payee",
                  "nodeType": "VariableDeclaration",
                  "scope": 10143,
                  "src": "2420:21:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 10132,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2420:15:123",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2419:23:123"
            },
            "returnParameters": {
              "id": 10135,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2452:0:123"
            },
            "scope": 10179,
            "src": "2387:112:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 10155,
              "nodeType": "Block",
              "src": "2679:48:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10152,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10145,
                        "src": "2715:4:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 10150,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10090,
                        "src": "2696:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$10384",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 10151,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10288,
                      "src": "2696:18:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 10153,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2696:24:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 10149,
                  "id": 10154,
                  "nodeType": "Return",
                  "src": "2689:31:123"
                }
              ]
            },
            "documentation": "@dev Returns the payments owed to an address.\n@param dest The creditor's address.",
            "id": 10156,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10146,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10145,
                  "name": "dest",
                  "nodeType": "VariableDeclaration",
                  "scope": 10156,
                  "src": "2635:12:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10144,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2635:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2634:14:123"
            },
            "returnParameters": {
              "id": 10149,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10148,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 10156,
                  "src": "2670:7:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10147,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2670:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2669:9:123"
            },
            "scope": 10179,
            "src": "2617:110:123",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10173,
              "nodeType": "Block",
              "src": "3149:52:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10170,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10158,
                        "src": "3189:4:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 10168,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10160,
                          "src": "3181:6:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 10163,
                            "name": "_escrow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10090,
                            "src": "3159:7:123",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Escrow_$10384",
                              "typeString": "contract Escrow"
                            }
                          },
                          "id": 10166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "deposit",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 10317,
                          "src": "3159:15:123",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                            "typeString": "function (address) payable external"
                          }
                        },
                        "id": 10167,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "3159:21:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_setvalue_nonpayable$_t_uint256_$returns$_t_function_external_payable$_t_address_$returns$__$value_$",
                          "typeString": "function (uint256) returns (function (address) payable external)"
                        }
                      },
                      "id": 10169,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3159:29:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 10171,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3159:35:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10172,
                  "nodeType": "ExpressionStatement",
                  "src": "3159:35:123"
                }
              ]
            },
            "documentation": "@dev Called by the payer to store the sent amount as credit to be pulled.\nFunds sent in this way are stored in an intermediate {Escrow} contract, so\nthere is no danger of them being spent before withdrawal.\n     * @param dest The destination address of the funds.\n@param amount The amount to transfer.",
            "id": 10174,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10161,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10158,
                  "name": "dest",
                  "nodeType": "VariableDeclaration",
                  "scope": 10174,
                  "src": "3110:12:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10157,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3110:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10160,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 10174,
                  "src": "3124:14:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10159,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3124:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3109:30:123"
            },
            "returnParameters": {
              "id": 10162,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3149:0:123"
            },
            "scope": 10179,
            "src": "3086:115:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 10178,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 10179,
            "src": "3207:29:123",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 10175,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "3207:7:123",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 10177,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 10176,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "3215:2:123",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "3207:11:123",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 10180,
        "src": "849:2390:123"
      }
    ],
    "src": "0:3240:123"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.7+commit.6da8b019.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-11-15T23:03:30.389Z",
  "devdoc": {
    "details": "Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. * Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. * To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.",
    "methods": {
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * NOTE: This function has been deprecated, use {withdrawPaymentsWithGas} instead. Calling contracts with fixed gas limits is an anti-pattern and may break contract interactions in network upgrades (hardforks). https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more.]",
        "params": {
          "payee": "Whose payments will be withdrawn."
        }
      },
      "withdrawPaymentsWithGas(address)": {
        "details": "Same as {withdrawPayments}, but forwarding all gas to the recipient.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.     * _Available since v2.4.0._"
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}